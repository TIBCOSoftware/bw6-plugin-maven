diff --git a/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/admin/client/RemoteDeployer.java b/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/admin/client/RemoteDeployer.java
index bd16a70..b870a9f 100644
--- a/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/admin/client/RemoteDeployer.java
+++ b/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/admin/client/RemoteDeployer.java
@@ -298,64 +298,86 @@ public class RemoteDeployer {
 	}
 
 	public void addAndDeployApplication(final String domainName, final String appSpaceName, final String appName, final String earName, 
-										final String file, final boolean replace, final String profile, final boolean backupEar, 
-										final String backupLocation,final String version,final boolean externalProfile, 
-										final String externalProfileLoc, final String appNodeName, final String path, boolean skipUploadArchive) throws Exception {
+			final String file, final boolean replace, final String profile, final boolean backupEar, 
+			final String backupLocation,final String version,final boolean externalProfile, 
+			final String externalProfileLoc, final String appNodeName, final String path, boolean skipUploadArchive, boolean startOnly, boolean stopOnly) throws Exception {
 		List<Application> applications = getApplications(domainName, appSpaceName, null, true);
 		String appDescription=null;
-		
+
 		for(Application application : applications) {
 			//= application.getDescription();
 			//log.info("*********"+appDescription+"**********");
-				if(application.getName().equals(appName)) {
-					if(replace) {
-						// Backup ear and profile
-						if(backupEar) {
-							String earPath = (path == null || path.isEmpty() ? "" : path+":") + application.getArchiveName().toString();
-							log.info("Generating backup ear file for application -> " + appName);
-							downloadArchive(domainName, backupLocation, earPath);
-							if(externalProfile) {
-								log.info("Skipping backup for external profile");
-							} else {
-								log.info("Generating backup substvar file for profile -> " + application.getProfileName());
-								downloadProfileAplication(domainName, backupLocation, earPath, application.getProfileName());
-							}
+			if(application.getName().equals(appName) && 
+					application.getVersion().equals(version)) {
+				if(replace) {
+					// Backup ear and profile
+					if(backupEar) {
+						String earPath = (path == null || path.isEmpty() ? "" : path+":") + application.getArchiveName().toString();
+						log.info("Generating backup ear file for application -> " + appName);
+						downloadArchive(domainName, backupLocation, earPath);
+						if(externalProfile) {
+							log.info("Skipping backup for external profile");
+						} else {
+							log.info("Generating backup substvar file for profile -> " + application.getProfileName());
+							downloadProfileAplication(domainName, backupLocation, earPath, application.getProfileName());
 						}
-						log.info("Application exists with name -> " + appName + ". Undeploying the Application as Redeploy flag is true.");
-						undeployApplication(domainName, appSpaceName, appName, application.getVersion());	
-					} else {
+					}
+					log.info("Application exists with name -> " + appName + ". Undeploying the Application as Redeploy flag is true.");
+					undeployApplication(domainName, appSpaceName, appName, application.getVersion());	
+				} else {
+					if (!startOnly && !stopOnly) {
 						log.info("Application exists with name -> " + appName + ". Not Re-deploying the Application as Redeploy flag is false.");
-						return;
+						return;	
 					}
+					break;
 				}
 			}
+		}
+
+		// Main execution from this point on
 		
-		 	if (!skipUploadArchive) {
-				log.info("Uploading the Archive file -> " + earName + ", EAR Upload Path -> "+ path);
-				uploadArchive(domainName, path, file, true);
-		 	}
-		 	else {
-				log.info("Skipping - Uploading the Archive file -> " + earName + ", EAR Upload Path -> "+ path);		 		
-		 	}
-			log.info("Deploying the Application with name -> " + appName + " with Profile -> " + profile);
-			deployApplication(domainName, appSpaceName, earName, path, startOndeploy, replace, profile,externalProfile,appDescription);
-			// fix from runtime side only
-			// UI doesn't seem to fix the externalProfile flag when profile is set to an application Profile 
-			// We should use the external profile here if this is really the case
-			if(externalProfile && !externalProfileLoc.isEmpty() && (profile != null && profile.equals("other")) ) {
-				setProfile(domainName,appSpaceName,version,appName,externalProfileLoc);
-				log.info("Starting Application -> "+ appName);
-				if(startOndeploy){
-					startApplication(domainName,appSpaceName,appName,version,appNodeName, true);
-				}
-			}
+		if (startOnly) {
+			log.info("Starting Application -> " + appName + " version "+ version);
+			startApplication(domainName,appSpaceName,appName,version,appNodeName, true);
 			Thread.sleep(SLEEP_INTERVAL);
+			checkApplicationState(domainName, appSpaceName, appName, version, Application.ApplicationRuntimeStates.Running);
+			return;
+		}
+		
+		if (stopOnly) {
+			log.info("Stopping Application -> " + appName + " version "+ version);
+			stopApplication(domainName, appSpaceName, appName, version, appNodeName, true);
+			Thread.sleep(SLEEP_INTERVAL);
+			checkApplicationState(domainName, appSpaceName, appName, version, Application.ApplicationRuntimeStates.Stopped);
+			return;
+		}
+
+		if (!skipUploadArchive) {
+			log.info("Uploading the Archive file -> " + earName + ", EAR Upload Path -> "+ path);
+			uploadArchive(domainName, path, file, true);
+		}
+		else {
+			log.info("Skipping - Uploading the Archive file -> " + earName + ", EAR Upload Path -> "+ path);		 		
+		}
+		log.info("Deploying the Application with name -> " + appName + " with Profile -> " + profile);
+		deployApplication(domainName, appSpaceName, earName, path, startOndeploy, replace, profile,externalProfile,appDescription);
+		// fix from runtime side only
+		// UI doesn't seem to fix the externalProfile flag when profile is set to an application Profile 
+		// We should use the external profile here if this is really the case
+		if(externalProfile && !externalProfileLoc.isEmpty() && (profile != null && profile.equals("other")) ) {
+			setProfile(domainName,appSpaceName,version,appName,externalProfileLoc);
+			log.info("Starting Application -> "+ appName);
 			if(startOndeploy){
-				checkApplicationState(domainName, appSpaceName, appName, version, Application.ApplicationRuntimeStates.Running);
-			}
-			else{
-				log.info("AppName -> "+ appName + " will not auto start since startOnDeploy flag is -> "+ startOndeploy);
+				startApplication(domainName,appSpaceName,appName,version,appNodeName, true);
 			}
+		}
+		Thread.sleep(SLEEP_INTERVAL);
+		if(startOndeploy){
+			checkApplicationState(domainName, appSpaceName, appName, version, Application.ApplicationRuntimeStates.Running);
+		}
+		else{
+			log.info("AppName -> "+ appName + " will not auto start since startOnDeploy flag is -> "+ startOndeploy);
+		}
 	}
 
 	private List<AppSpace> getAppSpaces(final String domainName, final String filter, final boolean full, final boolean status) throws ClientException {
diff --git a/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/application/BWDeployMojo.java b/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/application/BWDeployMojo.java
index febb262..823b543 100644
--- a/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/application/BWDeployMojo.java
+++ b/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/application/BWDeployMojo.java
@@ -135,6 +135,12 @@ public class BWDeployMojo extends AbstractMojo {
 	@Parameter(property="startOnDeploy", defaultValue ="true")
 	private boolean startOnDeploy;
 	
+	@Parameter(property="startOnly", defaultValue ="false")
+	private boolean startOnly;
+	
+	@Parameter(property="stopOnly", defaultValue ="false")
+	private boolean stopOnly;	
+	
 	private String earName;
 	private String earLoc;
 
@@ -243,10 +249,23 @@ public class BWDeployMojo extends AbstractMojo {
 					"domain -> " + domain + " earName -> " + earName
 							+ " Ear file to be uploaded -> "
 							+ earFile.getAbsolutePath());
-			deployer.addAndDeployApplication(domain, appSpace, applicationName,
-					earName, earFile.getAbsolutePath(), redeploy, profile,
-					backup, backupLocation, version, externalProfile,
-					externalProfileLoc, appNode, earUploadPath, skipUploadArchive);
+			deployer.addAndDeployApplication(domain, 
+												appSpace, 
+												applicationName,
+												earName, 
+												earFile.getAbsolutePath(), 
+												redeploy, 
+												profile,
+												backup, 
+												backupLocation, 
+												version, 
+												externalProfile,							
+												externalProfileLoc, 
+												appNode, 
+												earUploadPath, 
+												skipUploadArchive, 
+												startOnly, 
+												stopOnly);
 			deployer.close();
 			deployer.close();
 			BWEarUtils.deleteEARFileEntries(earLocation);
@@ -350,6 +369,8 @@ public class BWDeployMojo extends AbstractMojo {
 			externalProfileLoc = deployment.getProperty("externalProfileLoc");
 			earUploadPath = deployment.getProperty("earUploadPath");
 			skipUploadArchive = Boolean.parseBoolean(deployment.getProperty("skipUploadArchive"));
+			startOnly = Boolean.parseBoolean(deployment.getProperty("startOnly"));
+			stopOnly = Boolean.parseBoolean(deployment.getProperty("stopOnly"));
 			getAppNodeConfigProps(deployment);
 		} catch (Exception e) {
 			getLog().error(e);
diff --git a/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/application/BWEARInstallerMojo.java b/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/application/BWEARInstallerMojo.java
index b207afb..5ee55bd 100644
--- a/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/application/BWEARInstallerMojo.java
+++ b/Source/bw6-maven-plugin/src/main/java/com/tibco/bw/maven/plugin/application/BWEARInstallerMojo.java
@@ -176,6 +176,13 @@ public class BWEARInstallerMojo extends AbstractMojo {
 	@Parameter(property = "startOnDeploy", defaultValue = "true")
 	private boolean startOnDeploy;
 
+	@Parameter(property="startOnly", defaultValue ="false")
+	private boolean startOnly;
+	
+	@Parameter(property="stopOnly", defaultValue ="false")
+	private boolean stopOnly;	
+	
+
 	private String earLoc;
 	private String earName;
 	private String applicationName;
@@ -225,15 +232,6 @@ public class BWEARInstallerMojo extends AbstractMojo {
 	    			throw new Exception("EAR file not found for the Application");
 	    		}
 	    		
-	    		if(externalEarLocExists()){
-	    			File f = new File(externalEarLoc);
-	    			Path p = Paths.get(externalEarLoc + "/" +files[0].getName());
-	    			
-	    			Files.deleteIfExists(p);
-	    			FileUtils.copyFileToDirectory(files[0], f);
-	    			 deriveEARInformation(p.toFile());
-	    		} else
-	    			deriveEARInformation(files[0]);
 	    			
 	    		applicationName = manifest.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLIC_NAME);
 	
@@ -258,6 +256,20 @@ public class BWEARInstallerMojo extends AbstractMojo {
 				else 
 					throw new Exception("Invalid Bundle Version -"+ manifest.getMainAttributes().getValue("Bundle-Version"));
 				
+    			File selectedFile = files[0];
+    			if (files.length > 1)
+    				selectedFile = selectEARversion(files, version);
+	    		if(externalEarLocExists()){
+	    			File f = new File(externalEarLoc);
+	    			Path p = Paths.get(externalEarLoc + "/" +selectedFile.getName());
+	    			
+	    			Files.deleteIfExists(p);
+	    			FileUtils.copyFileToDirectory(files[0], f);
+	    			deriveEARInformation(p.toFile());
+	    		} else {
+	    			deriveEARInformation(selectedFile);
+	    		}
+				
 	    		deployer.getOrCreateDomain(domain, domainDesc);
 	    		AppSpace appSpaceDto = deployer.getOrCreateAppSpace(domain, appSpace, appSpaceDesc);
 	    		deployer.getOrCreateAppNode(domain, appSpace, appNode, Integer.parseInt(httpPort), osgiPort == null || osgiPort.isEmpty() ? -1 : Integer.parseInt(osgiPort), appNodeDesc, agentName);
@@ -273,9 +285,9 @@ public class BWEARInstallerMojo extends AbstractMojo {
 	    		} else {
 	    			getLog().info("AppSpace is Running.");
 	    		}
-	    		getLog().info("domain -> " + domain + " earName -> " + earName + " Ear file to be uploaded -> " + files[0].getAbsolutePath());
-	    		deployer.addAndDeployApplication(domain, appSpace, applicationName, earName, files[0].getAbsolutePath(), redeploy, profile, 
-	    				backup, backupLocation,version,externalProfile,externalProfileLoc, appNode, earUploadPath, skipUploadArchive);
+	    		getLog().info("domain -> " + domain + " earName -> " + earName + " Ear file to be uploaded -> " + selectedFile.getAbsolutePath());
+	    		deployer.addAndDeployApplication(domain, appSpace, applicationName, earName, selectedFile.getAbsolutePath(), redeploy, profile, 
+	    				backup, backupLocation,version,externalProfile,externalProfileLoc, appNode, earUploadPath, skipUploadArchive, startOnly, stopOnly);
 	    		deployer.close();
             }
     	} catch(Exception e) {
@@ -284,6 +296,18 @@ public class BWEARInstallerMojo extends AbstractMojo {
     	}
     }
     
+	private File selectEARversion(File[] files, String version) {
+		for (File f: files) {
+			String name = f.getName();
+			if (name.indexOf(version) >= 0)
+				return f;
+		}
+		
+		// can't find it, use first one like before
+		return files[0];
+		
+	}
+
 	private void deriveEARInformation(File file) {
 		earLoc = file.getAbsolutePath();
 		earLoc = earLoc.replace("\\", "/");
@@ -385,6 +409,8 @@ public class BWEARInstallerMojo extends AbstractMojo {
 			externalEarLoc=deployment.getProperty("externalEarLoc");
 			earUploadPath = deployment.getProperty("earUploadPath");
 			skipUploadArchive = Boolean.parseBoolean(deployment.getProperty("skipUploadArchive"));
+			startOnly = Boolean.parseBoolean(deployment.getProperty("startOnly"));
+			stopOnly = Boolean.parseBoolean(deployment.getProperty("stopOnly"));
 			getAppNodeConfigProps(deployment);
 		} catch(Exception e) {
 			deployToAdmin = false;
